   Link: canonical

  current community

     * chat blog
       Stack Overflow
     * Meta Stack Overflow
     * Stack Overflow Careers

  your communities

   Sign up or log in to customize your list.

  more stack exchange communities

   Stack Exchange
   sign up log in tour help 
     * Tour Start here for a quick overview of the site
     * Help Center Detailed answers to any questions you might have
     * Meta Discuss the workings and policies of this site
   stack overflow careers
   _____________________
   Stack Overflow
     * Questions
     * Tags
     * Users
     * Badges
     * Unanswered
     * Ask Question
   Link: //cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png?v=41f6e13ade69
   Take the 2-minute tour  *
   Stack Overflow is a question and answer site for professional and enthusiast programmers. It's 100% free.

                                                    pthread_create : passing an integer as the last argument

                                I have the following functions :                                                                                              
                                                                                                                                                              
                                void *foo(void *i) {                                                                                                          
                                    int a = (int) i;                                                                                                          
                                }                                                                                                                             
                                                                                                                                                              
                                int main() {                                                                                                                  
                                    pthread_t thread;                                                                                                         
                                    int i;                                                                                                                    
   up vote 9 down vote favorite     pthread_create(&thread, 0, foo, (void *) i);                                                                              
   5                            }                                                                                                                             
                                                                                                                                                              
                                At compilation, there are some errors about casting ((void *) i and int a = (int) i). How can I pass an integer as the last   
                                argument of pthread_create properly?                                                                                          
                                                                                                                                                              
                                c pthreads                                                                                                                    
                                                                                                                                                              
                                                            asked Oct 7 '13 at 19:27                                                                          
                                share|improve this question [IMG]                                                                                             
                                                            Gradient                                                                                          
                                                            4172718                                                                                           
                                                                                                                                                              
                                add a comment |  expand to show all comments on this post                                                                     

4 Answers

   active oldest votes

                        Building on szx's answer (so give him the credit), here's how it would work in your for loop:                                         
                                                                                                                                                              
                        void *foo(void *i) {                                                                                                                  
                            int a = *((int *) i);                                                                                                             
                            free(i);                                                                                                                          
                        }                                                                                                                                     
                                                                                                                                                              
                        int main() {                                                                                                                          
                            pthread_t thread;                                                                                                                 
                            for ( int i = 0; i < 10; ++1 ) {                                                                                                  
                                int *arg = malloc(sizeof(*arg));                                                                                              
                                if ( arg == NULL ) {                                                                                                          
                                    fprintf(stderr, "Couldn't allocate memory for thread arg.\n");                                                            
                                    exit(EXIT_FAILURE);                                                                                                       
                                }                                                                                                                             
                                                                                                                                                              
   up vote 10 down vote         *arg = i;                                                                                                                     
   accepted                     pthread_create(&thread, 0, foo, arg);                                                                                         
                            }                                                                                                                                 
                                                                                                                                                              
                            /*  Wait for threads, etc  */                                                                                                     
                                                                                                                                                              
                            return 0;                                                                                                                         
                        }                                                                                                                                     
                                                                                                                                                              
                        On each iteration of the loop, you're allocating new memory, each with a different address, so the thing that gets passed to          
                        pthread_create() on each iteration is different, so none of your threads ends up trying to access the same memory and you don't get   
                        any thread safety issues in the way that you would if you just passed the address of i. In this case, you could also set up an array  
                        and pass the addresses of the elements.                                                                                               
                                                                                                                                                              
                                                                           answered Oct 7 '13 at 23:02                                                        
                        share|improve this answer edited Oct 8 '13 at 0:05                       [IMG]                                                        
                                                                                        Paul Griffiths                                                        
                                                                                            12.2k21132                                                        
                             I get this when I compile : error: invalid conversion from `void*' to `int*' at this line : int *arg = malloc(sizeof(*arg));.    
                             You should put (int *) before malloc. -  Gradient Oct 8 '13 at 0:35                                                              
                             @Gradient: You must be compiling this as C++. The cast is not necessary in C and, to my mind, should not be included. -  Paul    
                             Griffiths Oct 8 '13 at 0:38                                                                                                      
                             I believe the statement int *arg = malloc(sizeof(*arg)); should instead be int *arg = malloc(sizeof(arg));. Here it works        
                             because a pointer on most machines is the size of int. However it may fail for other data types or even custom types. Correct me 
                             if I am wrong here -  HighOnMeat Feb 11 at 15:36                                                                                 
                             @Pegasus: you are incorrect. Here you want to be allocating the correct amount of space for an int, not for a pointer to int.    
                             Your alternative would do the latter, so it's actually your suggestion that would only work if pointers and ints are the same    
                             size. -  Paul Griffiths Feb 11 at 17:48                                                                                          
                             But doesn't this statement int *arg = malloc(sizeof(*arg)) in fact allocates space for a pointer rather a double pointer         
                             (consider *arg is in fact a pointer to a pointer to an int). I am still not convinced with your answer sir -  HighOnMeat Feb 12  
                             at 7:49                                                                                                                          
                                                                                                                                                              
                         |  show 12 more comments                                                                                                             

                       You can allocate an int on the heap and pass it to pthread_create(). You can then deallocate it in your thread function:               
                                                                                                                                                              
                       void *foo(void *i) {                                                                                                                   
                           int a = *((int *) i);                                                                                                              
                           free(i);                                                                                                                           
                       }                                                                                                                                      
                                                                                                                                                              
                       int main() {                                                                                                                           
   up vote 6 down vote     pthread_t thread;                                                                                                                  
                           int *i = malloc(sizeof(*i));                                                                                                       
                           pthread_create(&thread, 0, foo, (void *) i);                                                                                       
                       }                                                                                                                                      
                                                                                                                                                              
                                                 answered Oct 7 '13 at 19:31                                                                                  
                       share|improve this answer                       [IMG]                                                                                  
                                                                         szx                                                                                  
                                                                  1,60911123                                                                                  
                            +1, this is the way to do it. -  Paul Griffiths Oct 7 '13 at 22:44                                                                
                            Like I said in another answer : I am not sure this solution work. By the time the first thread reaches int a = *((int *) i), the  
                            for loop could have changed the value of i. Thus, when the first thread tries to initialize a, it would not read the right value. 
                            Or maybe I am confused with the concept of threads? -  Gradient Oct 7 '13 at 22:46                                                
                            @Gradient: Your other comment was correct, but that's not what's happening here. This solution allocates new memory for the       
                            argument to each thread (or, at least, if you put it in a loop, you would allocate new memory in each loop) so each thread gets a 
                       1    different object, and no two threads try to access the same memory. You're getting the concept of threads right, this solution    
                            just doesn't exhibit the problem you mentioned. I think this solution would be improved by actually showing how it would work in  
                            a loop. -  Paul Griffiths Oct 7 '13 at 22:48                                                                                      
                                                                                                                                                              
                       add a comment |  expand to show all comments on this post                                                                              

                       You should cast the address of i (rather than the value of i as you do now) in the last argument of pthread_create().                  
                                                                                                                                                              
                       pthread_create(&thread, 0, foo, (void *) &i);                                                                                          
                                                                ^  is missing                                                                                 
                                                                                                                                                              
                       And the casting is wrong in your function too. It should be:                                                                           
                                                                                                                                                              
                       int a = *((int*) i);                                                                                                                   
                                                                                                                                                              
                        1. If you intend to read the value, you should also initialize i to some value in main() as it's uninitialized now.                   
   up vote 5 down vote                                                                                                                                        
                       2 Use proper definition for main():                                                                                                    
                                                                                                                                                              
                        int main(void)                                                                                                                        
                                                                                                                                                              
                       or int main(int argc, char *argv[]) or its equivalent.                                                                                 
                                                                                                                                                              
                                                                           answered Oct 7 '13 at 19:35                                                        
                       share|improve this answer edited Oct 7 '13 at 19:47                       [IMG]                                                        
                                                                                             Blue Moon                                                        
                                                                                              40k74284                                                        
                            Does that work if i is declared in a for loop? For example for (int i=0;...;...) Or should I declared it before the for loop? -   
                            Gradient Oct 7 '13 at 21:13                                                                                                       
                            Declaring in a for loop is no different & it would work the same way. But declaring variable in for loop is allowed only in C99   
                            (or later) mode. You would need to compile with -std=c99 for example, along with other compiler options. -  Blue Moon Oct 7 '13   
                            at 21:22                                                                                                                          
                            Also, if I do &i, then I give the thread the address of variable i. If I create other threads, wouldn't i be shared between all   
                            threads? That would not be the desired behavior. -  Gradient Oct 7 '13 at 21:26                                                   
                            I am not sure the second solution would work. By the time, the first thread reaches int a = *((int *) i), the for loop could have 
                       2    changed the value of i. Thus, when the first thread tries to initialize a, it would not read the right value. -  Gradient Oct 7   
                            '13 at 22:06                                                                                                                      
                            @Gradient: You are correct, passing the address of the loop variable is not guaranteed to be safe. The results of casting an int  
                       1    to a pointer and back are implementation-defined, so this is not a great solution, either. Using malloc() is the best way. -      
                            Paul Griffiths Oct 7 '13 at 22:47                                                                                                 
                                                                                                                                                              
                        |  show 2 more comments                                                                                                               

                       Old question, but I faced the same problem today, and I decided not to follow this path. My application was really about performance,  
                       so I chose to have this array of ints declared statically.                                                                             
                                                                                                                                                              
                       Since I don't know a lot of applications where your pthread_join / pthread_cancel is in another scope than your pthread_create, I      
                       chose this way :                                                                                                                       
                                                                                                                                                              
                       #define NB_THREADS 4                                                                                                                   
                                                                                                                                                              
                       void *job(void *_i) {                                                                                                                  
                         unsigned int i = *((unsigned int *) _i);                                                                                             
                       }                                                                                                                                      
                                                                                                                                                              
                       int main () {                                                                                                                          
   up vote 2 down vote   unsigned int ints[NB_THREADS];                                                                                                       
                         pthread_t    threads[NB_THREADS];                                                                                                    
                         for (unsigned int i = 0; i < NB_THREADS; ++i) {                                                                                      
                           ints[i] = i;                                                                                                                       
                           pthread_create(&threads[i], NULL, job, &ints[i]);                                                                                  
                         }                                                                                                                                    
                       }                                                                                                                                      
                                                                                                                                                              
                       I find it more elegant, more efficient, and you don't have to worry about freeing since it only lives in this scope.                   
                                                                                                                                                              
                                                                        answered Jul 29 '14 at 4:50                                                           
                       share|improve this answer edited Jun 16 at 22:22                       [IMG]                                                           
                                                                                             Jerska                                                           
                                                                                         4,37131134                                                           
                                                                                                                                                              
                       add a comment |  expand to show all comments on this post                                                                              

Your Answer

   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
   _____________________________________________________________________________________________
    
   draft saved
   draft discarded
   _____________________

  Sign up or log in

   Sign up using Google

   Sign up using Facebook

   Sign up using Stack Exchange

  Post as a guest

   Name _______________________________  
   Email _______________________________ 

  Post as a guest

   Name _______________________________  
   Email _______________________________ 

   [ Post Your Answer ] discard

   By posting your answer, you agree to the privacy policy and terms of service.

Not the answer you're looking for? Browse other questions tagged c pthreads or ask your own question.

   asked  1 year ago  
   viewed 12738 times 
   active 1 month ago 

   Get the weekly newsletter!

     * Top questions and answers
     * Important announcements
     * Unanswered questions
   [ Sign up for the newsletter ]

   see an example newsletter

   By subscribing, you agree to the privacy policy and terms of service.

    Linked

   8
   Is it thread safe to call printf in threads that run simultaneously?
   0
   Print arguments inside thread

    Related

   6
   Passing multiple arguments to a thread in C (pthread_create)
   2
   can pthread_create argument be modified by thread?
   4
   pthread_create not working. passing argument 3 warning
   0
   pointer to a pointer for the last argument of pthread_create() caused crash
   2
   Multiple argument in pthread_create
   2
   Passing multiple arguments to threaded function from pthread_create
   1
   pthread_create arguments in C
   1
   pthread_create int instead of void
   1
   Pass integer value through pthread_create
   0
   How do I pass an integer into the pthread_create function from argv? (C)

    Hot Network Questions

     * You are a minor character in a fictional story. How do you get to be the hero?
     * How can it be derived that particles described by the Dirac equation must have spin 1/2?
     * How do you output the filename in find command while using -exec?
     * How appropriate is the interview question: "Show me a piece of code you like"?
     * Does dyeing elephant tusks help discourage poachers?
     * Overhead data when writing to a binary file
     * How do we know the human species arose in Africa?
     * Why there is no sign of logic symbols in mathematical texts?
     * Find max/min of vector of vectors
     * What was the weather like?
     * Is `x = std::move(x)` undefined?
     * Get custom attribute value without loading the product
     * how many ethernet cards ?
     * Math featuring The Unwise Owl
     * Preparing a YouTube downloader based on Windows form
     * "She hopes to earn her living as a ___ in an office"
     * Why do we show that structures aren't isomorphic by exhibiting a property not shared by one of them?
     * How to best upgrade your Towel for military combat
     * Did J.K. Rowling give two or more unrelated characters the same first name in any of the 10 books?
     * How can we show the boundary of a WordCloud shape?
     * Fake UserAgent visitor attack?
     * Numbering Hierarchical Outlines
     * Proper integration procedure
     * Why does carburetor icing require manual attention by the pilot?
   more hot questions
   question feed
   tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback

   Technology                                                               Life / Arts           Culture / Recreation  Science               Other           
                                                                             1. Photography        1. English Language                                        
                          1. Programmers                                     2. Science Fiction &     & Usage                                                 
    1. Stack Overflow     2. Unix & Linux               1. Database             Fantasy            2. Skeptics           1. Mathematics        1. Stack Apps  
    2. Server Fault       3. Ask Different (Apple)         Administrators    3. Graphic Design     3. Mi Yodeya          2. Cross Validated    2. Meta Stack  
    3. Super User         4. WordPress Development      2. Drupal Answers    4. Seasoned Advice       (Judaism)             (stats)               Exchange    
    4. Web Applications   5. Geographic Information     3. SharePoint           (cooking)          4. Travel             3. Theoretical        3. Area 51     
    5. Ask Ubuntu            Systems                    4. User Experience   5. Home Improvement   5. Christianity          Computer Science   4. Stack       
    6. Webmasters         6. Electrical Engineering     5. Mathematica       6. Personal Finance   6. Arqade (gaming)    4. Physics               Overflow
    7. Game Development   7. Android Enthusiasts        6. Salesforce           & Money            7. Bicycles           5. MathOverflow          Careers
    8. TeX - LaTeX        8. Information Security       7. more (14)         7. Academia           8. Role-playing       6. more (7)
                                                                             8. more (10)             Games             
                                                                                                   9. more (21)         

   site design / logo (c) 2015 stack exchange inc; user contributions licensed under cc by-sa 3.0 with attribution required
   rev 2015.7.22.2744
   Stack Overflow works best with JavaScript enabled
